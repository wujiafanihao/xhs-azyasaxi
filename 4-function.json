// ==UserScript==
// @name         一键获取小红书当前搜索页面的所有笔记 (改进版)
// @namespace    http://tampermonkey.net/
// @version      0.2
// @description  Simulate scroll on note page with visual feedback
// @author       wujiafa azyasaxi (modified by Assistant)
// @match        http*://xhslink.com/*
// @match        http*://www.xiaohongshu.com/explore*
// @match        http*://www.xiaohongshu.com/user/profile/*
// @match        http*://www.xiaohongshu.com/search_result*
// @grant        unsafeWindow
// @grant        GM_xmlhttpRequest
// ==/UserScript==

(function() {
    'use strict';

    // 使用 unsafeWindow 访问页面的全局变量
    const win = typeof unsafeWindow !== 'undefined' ? unsafeWindow : window;

    // 创建样式
    const style = document.createElement('style');
    style.textContent = `
        #xhs-helper {
            position: fixed;
            left: -60px;
            top: 50%;
            transform: translateY(-50%);
            transition: left 0.3s;
            z-index: 9999;
        }
        #xhs-helper:hover {
            left: 0;
        }
        #xhs-helper-button {
            width: 100px;
            height: 100px;
            background-color: #ff2442;
            border-radius: 0 60px 60px 0;
            display: flex;
            justify-content: flex-end;
            align-items: center;
            cursor: pointer;
            overflow: hidden;
        }
        #xhs-helper-icon {
            width: 50px;
            height: 50px;
            margin-right: 20px;
            background-image: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><circle cx="50" cy="50" r="45" fill="none" stroke="white" stroke-width="5"/><path d="M50,5 Q72.5,27.5 95,50 Q72.5,72.5 50,95 Q27.5,72.5 5,50 Q27.5,27.5 50,5 Z" fill="white"/></svg>');
            transition: transform 0.3s;
        }
        #xhs-helper:hover #xhs-helper-icon {
            transform: rotate(180deg);
        }
        #xhs-helper-menu {
            display: none;
            position: absolute;
            left: 100px;
            top: 0;
            width: 200px;
            background-color: white;
            border-radius: 5px;
            box-shadow: 0 0 10px rgba(0,0,0,0.1);
            color:black;
        }
        #xhs-helper:hover #xhs-helper-menu {
            display: block;
        }
        .xhs-helper-item {
            padding: 15px;
            cursor: pointer;
            transition: background-color 0.3s;
        }
        .xhs-helper-item:hover {
            background-color: #f0f0f0;
        }
        .xhs-helper-item:first-child {
            border-radius: 5px 5px 0 0;
        }
        .xhs-helper-item:last-child {
            border-radius: 0 0 5px 5px;
        }
    `;
    document.head.appendChild(style);

    // 创建 HTML 结构
    const helper = document.createElement('div');
    helper.id = 'xhs-helper';
    helper.innerHTML = `
    <div id="xhs-helper-button">
        <div id="xhs-helper-icon"></div>
    </div>
    <div id="xhs-helper-menu">
        <div class="xhs-helper-item" id="all-note-info">获取搜索页面目前文章</div>
    </div>
    `;
    document.body.appendChild(helper);

    document.getElementById('all-note-info').addEventListener('click', async () => {
        const extractNoteInfo = (iframeWindow) => {
            return new Promise((resolve) => {
                const checkInitialState = () => {
                    if (iframeWindow && iframeWindow.__INITIAL_STATE__) {
                        const noteId = iframeWindow.location.pathname.split('/').pop();
                        console.log(noteId)
                        console.log(iframeWindow.__INITIAL_STATE__)
                        if (iframeWindow.__INITIAL_STATE__.note && iframeWindow.__INITIAL_STATE__.note.noteDetailMap && iframeWindow.__INITIAL_STATE__.note.noteDetailMap[noteId]) {
                            resolve(iframeWindow.__INITIAL_STATE__.note.noteDetailMap[noteId]);
                        } else {
                            console.error("无法在__INITIAL_STATE__中找到noteDetailMap或特定noteId");
                            resolve(null);
                        }
                    } else {
                        // 如果还没加载完，等待一段时间后再次检查
                        setTimeout(checkInitialState, 100);
                    }
                };
                checkInitialState();
            });
        };

        const extractAllNoteInfo = () => {
            if (win.__INITIAL_STATE__ && win.__INITIAL_STATE__.search && win.__INITIAL_STATE__.search.feeds && win.__INITIAL_STATE__.search.feeds._rawValue) {
                return win.__INITIAL_STATE__.search.feeds._rawValue;
            }
            console.error("无法从全局window获取__INITIAL_STATE__或search.feeds");
            return null;
        };

        const extractCommentDetails = (noteInfo) => {
            if (noteInfo && noteInfo.comments && noteInfo.comments.list) {
                const currentTime = noteInfo.currentTime;
                const comments = noteInfo.comments.list.map(comment => ({
                    content: comment.content,
                    createTime: comment.createTime,
                    timeDifference: calculateTimeDifference(comment.createTime, currentTime),
                    ipLocation: comment.ipLocation,
                    userInfo: {
                        nickname: comment.userInfo.nickname,
                        userId: comment.userInfo.userId
                    }
                }));
                const noteDetails = {
                    desc: noteInfo.note.desc,
                    time: noteInfo.note.time,
                    title: noteInfo.note.title,
                    ipLocation: noteInfo.note.ipLocation,
                    interactInfo: {
                        collectedCount: noteInfo.note.interactInfo.collectedCount,
                        commentCount: noteInfo.note.interactInfo.commentCount,
                        likedCount: noteInfo.note.interactInfo.likedCount,
                        shareCount: noteInfo.note.interactInfo.shareCount
                    },
                    user: {
                        nickname: noteInfo.note.user.nickname
                    }
                };

                return {
                    comments,
                    currentTime,
                    noteDetails
                };
            } else {
                console.error("comments 或 list 未定义");
                return {
                    comments: [],
                    noteDetails: {}
                };
            }
        };

        function calculateTimeDifference(createTime, currentTime) {
            const diff = currentTime - createTime;
            const minutes = Math.floor(diff / 60000);
            const hours = Math.floor(minutes / 60);
            const days = Math.floor(hours / 24);

            if (days > 0) return `${days}天前`;
            if (hours > 0) return `${hours}小时前`;
            if (minutes > 0) return `${minutes}分钟前`;
            return '刚刚';
        }

        const extractAndSaveDetails = async (iframeWindow) => {
            const noteInfo = await extractNoteInfo(iframeWindow);
            console.log(noteInfo);
            if (noteInfo) {
                const details = extractCommentDetails(noteInfo);
                saveToCSV(details,details.noteDetails);
                saveTextToCSV(details.noteDetails);
            } else {
                console.error("无法获取笔记信息");
            }
        };

        const saveToCSV = (details, noteDetails) => {
            let csvContent = "\uFEFF内容,发布时间,时间差,IP位置,用户昵称,用户ID\n";
            details.comments.forEach(comment => {
                csvContent += `"${comment.content}","${comment.createTime}","${comment.timeDifference}","${comment.ipLocation}","${comment.userInfo.nickname}","${comment.userInfo.userId}"\n`;
            });
            const filename = noteDetails.title;
            downloadCSV(csvContent, `${filename}comments.csv`);
        };

        const saveTextToCSV = (noteDetails) => {
            let csvContent = "\uFEFF描述,时间,标题,IP位置,收藏数,评论数,点赞数,分享数,用户昵称\n";
            csvContent += `"${noteDetails.desc}","${noteDetails.time}","${noteDetails.title}","${noteDetails.ipLocation}","${noteDetails.interactInfo.collectedCount}","${noteDetails.interactInfo.commentCount}","${noteDetails.interactInfo.likedCount}","${noteDetails.interactInfo.shareCount}","${noteDetails.user.nickname}"\n`;
            const filename = noteDetails.title;
            downloadCSV(csvContent, `${filename}note_details.csv`);
        };

        const downloadCSV = (content, filename) => {
            const blob = new Blob([content], { type: 'text/csv;charset=utf-8;' });
            const link = document.createElement("a");
            if (link.download !== undefined) {
                const url = URL.createObjectURL(blob);
                link.setAttribute("href", url);
                link.setAttribute("download", filename);
                link.style.visibility = 'hidden';
                document.body.appendChild(link);
                link.click();
                document.body.removeChild(link);
            }
        };

        function simulateScroll(iframeDocument) {
            return new Promise((resolve) => {
                const noteContainer = iframeDocument.getElementById('noteContainer');
                if (!noteContainer) {
                    console.error("未找到目标元素");
                    resolve();
                    return;
                }

                let previousHeight = 0;
                let scrollCount = 0;
                const maxScrolls = 2;
                const scrollStep = 5000; // 每次滚动的步长
                const waitTime = 2000; // 每次滚动后等待的时间

                const scrollPage = () => {
                    if (shouldStop) {
                        clearInterval(scrollInterval);
                        resolve();
                        return;
                    }
                    noteContainer.scrollTop += scrollStep;
                    const currentHeight = noteContainer.scrollHeight;

                    console.log(`当前高度: ${currentHeight}, 之前高度: ${previousHeight}`); // 添加调试信息

                    if (currentHeight > previousHeight) {
                        previousHeight = currentHeight;
                        scrollCount = 0; // 重置滚动次数
                    } else {
                        scrollCount++;
                        console.log(`滚动次数: ${scrollCount}`); // 添加调试信息
                        if (scrollCount >= maxScrolls) {
                            clearInterval(scrollInterval);
                            console.log("达到最大滚动次数，开始提取数据");
                            resolve();
                        }
                    }
                };

                const scrollInterval = setInterval(scrollPage, waitTime); // 增加滚动间隔时间
            });
        }

        let shouldStop = false; // 全局状态，用于控制是否停止获取笔记

        async function simulateNotePageVisit(noteId, index, total) {
            return new Promise((resolve, reject) => {
                if (shouldStop) {
                    resolve();
                    return;
                }

                const url = `https://www.xiaohongshu.com/explore/${noteId}`;
                const container = document.createElement('div');
                container.className = 'note-scroller';
                container.style.position = 'fixed';
                container.style.top = '50px';
                container.style.right = '10px';
                container.style.width = '500px';
                container.style.height = '800px';
                container.style.backgroundColor = '#f0f0f0';
                container.style.border = '1px solid #ccc';
                container.style.borderRadius = '10px'; // 圆角边框
                container.style.boxShadow = '0 4px 8px rgba(0, 0, 0, 0.1)'; // 阴影效果
                container.style.padding = '10px';
                container.style.zIndex = '1001';
                container.style.overflow = 'auto';

                const title = document.createElement('h3');
                title.textContent = `模拟访问笔记 ${index + 1}/${total}`;
                container.appendChild(title);

                const iframe = document.createElement('iframe');
                iframe.style.width = '100%';
                iframe.style.height = '800px';
                iframe.style.border = 'none';
                iframe.src = url;

                const closeButton = document.createElement('button');
                closeButton.textContent = '终止并关闭';
                closeButton.style.position = 'absolute';
                closeButton.style.top = '10px';
                closeButton.style.right = '10px';
                closeButton.style.padding = '5px 10px';
                closeButton.style.border = 'none';
                closeButton.style.backgroundColor = '#ff4d4d';
                closeButton.style.color = 'white';
                closeButton.style.borderRadius = '5px';
                closeButton.style.cursor = 'pointer';
                closeButton.onclick = () => {
                    shouldStop = true; // 设置全局状态为停止
                    clearInterval(scrollInterval);
                    document.body.removeChild(container);
                    resolve();
                };

                container.appendChild(closeButton);
                container.appendChild(iframe);
                document.body.appendChild(container);

                let scrollInterval;

                iframe.onload = async () => {
                    const iframeWindow = iframe.contentWindow;
                    const iframeDocument = iframeWindow.document;

                    scrollInterval = await simulateScroll(iframeDocument);

                    // 提取笔记信息并保存
                    await extractAndSaveDetails(iframeWindow);

                    setTimeout(() => {
                        document.body.removeChild(container);
                        resolve();
                    }, 2000);
                };

                iframe.onerror = (err) => {
                    console.error("加载 iframe 失败", err);
                    setTimeout(() => {
                        document.body.removeChild(container);
                        reject(err);
                    }, 2000);
                };
            });
        }
        const allNotes = extractAllNoteInfo();
        if (allNotes && allNotes.length > 0) {
            for (let i = 0; i < allNotes.length; i++) {
                const note = allNotes[i];
                console.log(note.id);
                await simulateNotePageVisit(note.id, i, allNotes.length);
            }
        } else {
            console.error("未获取到笔记信息");
        }
    });
})();
